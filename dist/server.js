(()=>{var e={29:e=>{e.exports={"/designs":{get:{tags:["Designs"],summary:"Get all designs with pagination and filtering",parameters:[{name:"page",in:"query",description:"Page number (default 1)",required:!1,schema:{type:"integer",default:1}},{name:"limit",in:"query",description:"Number of items per page (default 50)",required:!1,schema:{type:"integer",default:50}},{name:"product_id",in:"query",description:"Filter by product ID",required:!1,schema:{type:"string"}},{name:"email",in:"query",description:"Filter by email",required:!1,schema:{type:"string"}},{name:"name",in:"query",description:"Filter by design name",required:!1,schema:{type:"string"}},{name:"saree_style",in:"query",description:"Filter by saree style",required:!1,schema:{type:"string"}},{name:"jacquard_type",in:"query",description:"Filter by jacquard type",required:!1,schema:{type:"string"}},{name:"label",in:"query",description:"Filter by label",required:!1,schema:{type:"string"}},{name:"epi",in:"query",description:"Filter by EPI",required:!1,schema:{type:"integer"}},{name:"ppi",in:"query",description:"Filter by PPI",required:!1,schema:{type:"integer"}},{name:"hooks",in:"query",description:"Filter by number of hooks",required:!1,schema:{type:"integer"}}],responses:{200:{description:"List of designs with pagination and filters",content:{"application/json":{schema:{type:"object",properties:{page:{type:"integer"},limit:{type:"integer"},total:{type:"integer"},filters:{type:"object"},designs:{type:"array",items:{type:"object"}}}}}}},500:{description:"Server error"}}},post:{tags:["Designs"],summary:"Create a new design",requestBody:{required:!0,content:{"application/json":{schema:{type:"object"}}}},responses:{200:{description:"Design created successfully",content:{"application/json":{schema:{type:"object",properties:{message:{type:"string"},design:{type:"object"}}}}}},500:{description:"Server error"}}}}}},91:(e,r,s)=>{const t=s(252),n=s(131),i=t.Router();i.post("/",async(e,r)=>{try{const s=e.body,t=await n.createDesign(s);r.json({message:"Design created successfully",design:t})}catch(e){console.error("❌ Error creating design:",e),r.status(500).json({error:"Server error"})}}),i.get("/",async(e,r)=>{try{const s=parseInt(e.query.page,10)||1,t=parseInt(e.query.limit,10)||50,i=(s-1)*t,o={};["id","product_id","email","name","saree_style","jacquard_type","label","epi","ppi","hooks"].forEach(r=>{void 0!==e.query[r]&&(o[r]=e.query[r])});const{designs:a,total:c}=await n.getDesignsPaginated({skip:i,limit:t,filters:o});r.json({page:s,limit:t,total:c,filters:o,designs:a})}catch(e){console.error("❌ Error fetching designs:",e),r.status(500).json({error:"Server error"})}}),e.exports=i},131:(e,r,s)=>{const t=s(139);(async()=>{try{await t.query("\n      CREATE TABLE IF NOT EXISTS designs (\n        id SERIAL PRIMARY KEY,\n        product_id VARCHAR(255),\n        cards JSONB,\n        email VARCHAR(255),\n        epi INT,\n        final_price NUMERIC,\n        harnessbuild TEXT,\n        hooks INT,\n        image_type JSONB,\n        image_url JSONB,\n        label VARCHAR(255),\n        listing_rate NUMERIC,\n        name VARCHAR(255),\n        original_image_url TEXT,\n        ppi INT,\n        saree_style VARCHAR(100),\n        redirect_url TEXT,\n        body_epi INT,\n        total_hooks INT,\n        border_epi INT,\n        jacquard_type VARCHAR(100),\n        br_hooks INT,\n        by_hooks INT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    "),console.log("✅ Designs table ensured")}catch(e){console.error("❌ Error ensuring designs table:",e.message),process.exit(1)}})(),e.exports={createDesign:async function(e){try{return(await t.query("INSERT INTO designs (\n        product_id, cards, email, epi, final_price, harnessbuild, hooks,\n        image_type, image_url, label, listing_rate, name, original_image_url, ppi,\n        saree_style, redirect_url, body_epi, total_hooks, border_epi,\n        jacquard_type, br_hooks, by_hooks\n      ) VALUES (\n        $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22\n      ) RETURNING *",[e.product_id,e.cards||[],e.email,e.epi,e.final_price,e.harnessbuild,e.hooks,e.image_type||[],e.image_url||[],e.label,e.listing_rate,e.name,e.original_image_url,e.ppi,e.saree_style,e.redirect_url,e.body_epi,e.total_hooks,e.border_epi,e.jacquard_type,e.br_hooks,e.by_hooks])).rows[0]}catch(e){throw console.error("❌ Error creating design:",e.message),e}},getDesignsPaginated:async function({skip:e=0,limit:r=50,filters:s={}}){try{const n=[],i=[];let o=1;Object.entries(s).forEach(([e,r])=>{n.push(`${e} = $${o}`),i.push(r),o++});const a=n.length>0?`WHERE ${n.join(" AND ")}`:"",c=await t.query(`SELECT COUNT(*) FROM designs ${a}`,i),p=parseInt(c.rows[0].count,10);return{designs:(await t.query(`SELECT * FROM designs ${a} ORDER BY id DESC LIMIT $${o} OFFSET $${o+1}`,[...i,r,e])).rows,total:p}}catch(e){throw console.error("❌ Error fetching paginated designs:",e.message),e}}}},139:(e,r,s)=>{s(818).config();const{Pool:t}=s(449),n=new t({connectionString:`postgresql://${process.env.DB_USER}:${encodeURIComponent(process.env.DB_PASSWORD)}@${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`,ssl:{rejectUnauthorized:!1}});(async()=>{try{const e=await n.connect();console.log("✅ Database connected successfully. Thugil Creation Server Running"),e.release()}catch(e){console.error("❌ Failed to connect to the database."),console.error(e),process.exit(1)}})(),e.exports=n},252:e=>{"use strict";e.exports=require("express")},320:e=>{"use strict";e.exports=require("swagger-ui-express")},449:e=>{"use strict";e.exports=require("pg")},577:e=>{"use strict";e.exports=require("cors")},621:(e,r,s)=>{const t=s(139),n=s(729);(async()=>{await(async()=>{try{await t.query("\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        password VARCHAR(255) NOT NULL,\n        type VARCHAR(50) NOT NULL DEFAULT 'tenant', -- superadmin, admin, tenant\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    "),console.log("✅ Users table ensured")}catch(e){console.error("❌ Error creating users table:",e.message),process.exit(1)}})(),await(async()=>{try{await t.query("\n      CREATE TABLE IF NOT EXISTS permissions (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) UNIQUE NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    "),console.log("✅ Permissions table ensured")}catch(e){console.error("❌ Error creating permissions table:",e.message),process.exit(1)}})(),await(async()=>{try{await t.query("\n      CREATE TABLE IF NOT EXISTS roles (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(50) UNIQUE NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    "),console.log("✅ Roles table ensured")}catch(e){console.error("❌ Error creating roles table:",e.message),process.exit(1)}})(),await(async()=>{try{await t.query("\n      CREATE TABLE IF NOT EXISTS role_permissions (\n        id SERIAL PRIMARY KEY,\n        role_id INTEGER REFERENCES roles(id) ON DELETE CASCADE,\n        permission_id INTEGER REFERENCES permissions(id) ON DELETE CASCADE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(role_id, permission_id)\n      )\n    "),console.log("✅ Role-Permissions table ensured")}catch(e){console.error("❌ Error creating role_permissions table:",e.message),process.exit(1)}})(),await(async()=>{try{await t.query("\n      CREATE TABLE IF NOT EXISTS user_roles (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        role_id INTEGER REFERENCES roles(id) ON DELETE CASCADE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(user_id, role_id)\n      )\n    "),console.log("✅ User-Roles table ensured")}catch(e){console.error("❌ Error creating user_roles table:",e.message),process.exit(1)}})()})();const i={create:async(e,r,s="tenant")=>{try{const i=await n.hash(r,10);return(await t.query("INSERT INTO users (email, password, type) VALUES ($1, $2, $3) RETURNING id, email, type",[e,i,s])).rows[0]}catch(e){if("23505"===e.code)throw new Error("User with this email already exists");throw console.error("❌ Error creating user:",e.message),e}},findByEmail:async e=>{try{return(await t.query("SELECT * FROM users WHERE email = $1",[e])).rows[0]||null}catch(e){throw console.error("❌ Error finding user by email:",e.message),e}},verifyPassword:async(e,r)=>{try{return await n.compare(e,r)}catch(e){throw console.error("❌ Error verifying password:",e.message),e}}};e.exports=i},729:e=>{"use strict";e.exports=require("bcryptjs")},746:e=>{e.exports={"/auth/login":{post:{tags:["Auth"],summary:"User login",requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["email","password"],properties:{email:{type:"string",example:"john@example.com"},password:{type:"string",example:"password123"}}}}}},responses:{200:{description:"Login successful",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"},user:{type:"object",properties:{id:{type:"string"},email:{type:"string"},name:{type:"string"}}},message:{type:"string"}}}}}},400:{description:"Bad request - missing credentials"},401:{description:"Unauthorized - invalid credentials"},500:{description:"Server error"}}}}}},818:e=>{"use strict";e.exports=require("dotenv")},829:e=>{"use strict";e.exports=require("jsonwebtoken")},898:(e,r,s)=>{const t=s(252),n=s(829),i=s(729),o=s(621),a=s(139),c=t.Router();c.post("/login",async(e,r)=>{const{email:s,password:t}=e.body;if(!s||!t)return r.status(400).json({error:"Email and password are required"});try{const e=await o.findByEmail(s);if(!e)return r.status(401).json({error:"Invalid credentials"});if(!await i.compare(t,e.password))return r.status(401).json({error:"Invalid credentials"});const c=n.sign({id:e.id,email:e.email},process.env.JWT_SECRET,{expiresIn:"1h"}),p=(await a.query("\n      SELECT p.permission\n      FROM permissions p\n      JOIN role_permissions rp ON p.id = rp.permission_id\n      JOIN roles r ON rp.role_id = r.id\n      JOIN user_roles ur ON r.id = ur.role_id\n      WHERE ur.user_id = $1\n      GROUP BY p.id, p.permission\n      ORDER BY p.id\n      ",[e.id])).rows.map(e=>e.permission);return r.cookie("permissions",JSON.stringify(p),{httpOnly:!0,secure:!0,maxAge:36e5,sameSite:"strict"}),r.json({token:c,user:{id:e.id,email:e.email},permissions:p,message:"Login successful"})}catch(e){return console.error("❌ Login error:",e),r.status(500).json({error:"Server error"})}}),e.exports=c}},r={};function s(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,s),i.exports}const t=s(252),n=s(577),i=s(898),o=s(91),a=s(320),c=s(746),p=s(29),l=t();l.use(n({origin:["http://localhost:5173","https://thugilcreation-admin.netlify.app"],credentials:!0})),l.use(t.json());const d={openapi:"3.0.0",info:{title:"Thugil Creation Admin",version:"1.0.0"},tags:[{name:"Auth",description:"Authentication endpoints"},{name:"Designs",description:"Designs management endpoints"}],paths:{...c,...p}};l.use("/api-docs",a.serve,a.setup(d)),console.log("✅ Swagger docs available at /api-docs"),l.use("/auth",i),l.use("/designs",o),l.use((e,r)=>{r.status(404).json({error:"Route not found"})}),l.use((e,r,s,t)=>{console.error("❌ Server error:",e),s.status(500).json({error:"Internal server error"})});const u=process.env.PORT||3e3;l.listen(u,()=>console.log(`✅ Server running on http://localhost:${u}`)),module.exports={}})();